imports:
  MerchantOperatingCity: Domain.Types.Merchant.MerchantOperatingCity
  HighPrecMoney: Kernel.Types.Common
  UTCTime: Kernel.Prelude
  Person: Domain.Types.Person
  ShortId: Kernel.Types.Id
  TicketBookingService: Domain.Types.TicketBookingService
  TicketBookingServiceCategory: Domain.Types.TicketBookingServiceCategory
  TicketBookingPeopleCategory: Domain.Types.TicketBookingPeopleCategory
  TicketBooking: Domain.Types.TicketBooking
  TicketPlace: Domain.Types.TicketPlace
  TicketService: Domain.Types.TicketService
  BusinessHour: Domain.Types.BusinessHour
  SpecialOccasion: Domain.Types.SpecialOccasion
  ServiceCategory: Domain.Types.ServiceCategory
  ServicePeopleCategory: Domain.Types.ServicePeopleCategory
  BusinessHourType: Domain.Types.BusinessHour

TicketPlace:
  tableName: ticket_place

  fields:
    id : Id TicketPlace
    merchantOperatingCityId : Id MerchantOperatingCity
    name : Text
    description : Maybe Text
    lat : Maybe Double
    lon : Maybe Double
    gallery : "[Text]"
    shortDesc : Text
    iconUrl : Maybe Text
    termsAndConditions : "[Text]"
    placeType : PlaceType #
    mapImageUrl : Maybe Text
    openTimings : Maybe TimeOfDay
    closeTimings : Maybe TimeOfDay

  types:
    PlaceType:
      enum: "Museum,ThemePark,AmusementPark,WaterPark,WildLifeSanctuary,ArtGallery,HeritageSite,ReligiousSite,Other"

  default:
    termsAndConditions: "'{}'"
    placeType: "'Other'"

  queries:
    getTicketPlaces:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId
    findById:
      kvFunction: findOneWithKV
      where: id

TicketService:
  tableName : ticket_service

  fields :
    id : Id TicketService
    placesId : Text
    service : Text
    shortDesc : Maybe Text
    operationalDays : "[Text]"
    maxVerification : Int
    allowFutureBooking : Bool
    expiry : ExpiryType
    businessHours : "[Id BusinessHour]"
  types:
    ExpiryType:
      enum: "InstantExpiry Kernel.Prelude.Int,VisitDate Kernel.Prelude.TimeOfDay"

  default:
    operationalDays: "'{Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday}'"
    allowFutureBooking: "true"
    business_hours: "'{}'"
    expiry: "'VisitDate 12:00:00'"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    getTicketServicesByPlaceId:
      kvFunction: findAllWithKV
      where: placesId

SpecialOccasion:
  tableName : special_occasion

  fields :
    id : Id SpecialOccasion
    entityId : Text
    date : Maybe Day
    dayOfWeek : Maybe Text
    specialDayType : SpecialDayType
    description : Maybe Text
    businessHours : "[Id BusinessHour]"

  types:
    SpecialDayType:
      enum: "Open,Closed"

  queries:
    findSpecialOccasionByEntityIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [entityId, date]
    findAllSpecialOccasionByEntityId:
      kvFunction: findAllWithKV
      where:
        and: [entityId, date]
    findSpecialOccasionByEntityIdAndDayOfWeek:
      kvFunction: findOneWithKV
      where:
        and: [entityId, dayOfWeek]

BusinessHour:
  tableName: business_hour

  fields:
    id: Id BusinessHour
    btype: BusinessHourType # Slot TimeOfDay | Duration TimeOfDay TimeOfDay
    categoryId: "[Id ServiceCategory]"
  types:
    BusinessHourType:
      enum: "Slot Kernel.Prelude.TimeOfDay,Duration Kernel.Prelude.TimeOfDay Kernel.Prelude.TimeOfDay"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

ServiceCategory:
  tableName: service_category

  fields:
    id: Id ServiceCategory
    name: Text
    description: Text
    availableSeats: Maybe Int
    allowedSeats: Maybe Int
    peopleCategory: "[Id ServicePeopleCategory]"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

ServicePeopleCategory:
  tableName: service_people_category

  fields:
    id: Id ServicePeopleCategory
    name: Text
    description: Text
    pricePerUnit: HighPrecMoney

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

SeatManagement:
  tableName: seat_management

  fields:
    id: Id SeatManagement
    date: Day
    ticketServiceCategoryId: Id ServiceCategory
    booked: Int
    blocked: Int

  default:
    booked: "0"
    blocked: "0"

  queries:
    findByTicketServiceCategoryIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [ticketServiceCategoryId, date]
    updateBookedSeats:
      kvFunction: updateWithKV
      params: [booked]
      where:
        and: [ticketServiceCategoryId, date]
    updateBlockedSeats:
      kvFunction: updateWithKV
      params: [blocked]
      where:
        and: [ticketServiceCategoryId, date]


### Ticket Booking ###
TicketBooking:
  tableName: ticket_booking

  fields:
    id: Id TicketBooking
    shortId: ShortId TicketBooking
    merchantOperatingCityId: Id MerchantOperatingCity
    ticketPlaceId: Id TicketPlace
    personId: Id Person
    amount: HighPrecMoney
    visitDate: Day
    status: BookingStatus
    createdAt: UTCTime
    updatedAt: UTCTime

  constraints:
    id: PrimaryKey
    shortId: SecondaryKey
    personId: SecondaryKey

  types:
    BookingStatus:
      enum: "Pending,Failed,Booked"
      derive: HttpInstance

  queries:
    updateStatusByShortId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: shortId
    findById:
      kvFunction: findOneWithKV
      where: id
    findByShortId:
      kvFunction: findOneWithKV
      where: shortId
    getAllBookingsByPersonId:
      kvFunction: findAllWithOptionsKV
      where:
        and: [personId, merchantOperatingCityId, status]

TicketBookingService:
  tableName: ticket_booking_service

  fields:
    id: Id TicketBookingService
    shortId: ShortId TicketBookingService
    ticketBookingId: Id TicketBooking
    ticketServiceId: Id TicketService
    merchantOperatingCityId: Id MerchantOperatingCity
    amount: HighPrecMoney
    status: ServiceStatus
    verificationCount: Int
    btype: BusinessHourType
    expiryDate: Maybe UTCTime
    createdAt: UTCTime
    updatedAt: UTCTime

  types:
    ServiceStatus:
      enum: "Pending,Failed,Confirmed,Verified"

  default:
    btype: "'Duration 03:30:00 12:00:00'"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByShortId:
      kvFunction: findOneWithKV
      where: shortId
    findAllByBookingId:
      kvFunction: findAllWithKV
      where: ticketBookingId
    updateAllStatusByBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: ticketBookingId
    updateVerificationById:
      kvFunction: updateWithKV
      params: [status, verificationCount, updatedAt]
      where: id

TicketBookingServiceCategory:
  tableName: ticket_booking_service_category

  fields:
    id: Id TicketBookingServiceCategory
    ticketBookingServiceId: Id TicketBookingService
    name: Text
    bookedSeats: Int
    amount: HighPrecMoney
    serviceCategoryId: Maybe Text

  queries:
    findAllByTicketBookingServiceId:
      kvFunction: findAllWithKV
      where: ticketBookingServiceId

TicketBookingPeopleCategory:
  tableName: ticket_booking_people_category

  fields:
    id: Id TicketBookingPeopleCategory
    ticketBookingServiceCategoryId: Id TicketBookingServiceCategory
    name: Text
    pricePerUnit: HighPrecMoney
    numberOfUnits: Int

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByServiceCategoryId:
      kvFunction: findAllWithKV
      where: ticketBookingServiceCategoryId