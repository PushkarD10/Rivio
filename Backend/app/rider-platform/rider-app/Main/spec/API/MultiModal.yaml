imports:
  Journey: Domain.Types.Journey
  SearchRequest: Domain.Types.SearchRequest
  Estimate: Domain.Types.Estimate
  LocationAddress: Domain.Types.LocationAddress
  PriceAPIEntity : Kernel.Types.Common
  FRFSStationAPI : API.Types.UI.FRFSTicketService
  TravelMode : Domain.Types.Trip
  Location : Domain.Types.Location
  LegInfo: Lib.JourneyModule.Types
  JourneyLeg: Domain.Types.JourneyLeg
  LatLong: Kernel.External.Maps.Types
  Price: Kernel.Types.Common
  JourneyLegStatus : Lib.JourneyModule.Types

module: MultimodalConfirm

types:
  JourneyInfoReq:
    legsReq: [JourneyLegsReq]
  JourneyLegsReq:
    legNumber: Int
    originAddress: LocationAddress
    destinationAddress: LocationAddress  #regenerate the files to get proper 'destinationAddress' field
  JourneyInfoResp:
    estimatedDuration: Maybe Seconds
    estimatedFare: Maybe PriceAPIEntity
    estimatedDistance: Distance
    legs: [LegInfo]

  JourneyLegInfo:
    enum: "Walk JourneyLegWalkInfo, Taxi JourneyLegTaxiInfo, Bus JourneyLegBusInfo, Metro JourneyLegMetroInfo"
  JourneyLegWalkInfo:
    origin: Location
    destination: Location

  JourneyLegTaxiInfo:
    origin: Location
    stops: [Location]
    providerName: Text
    providerLogo: Maybe Text

  JourneyLegMetroInfo:
    originStop: FRFSStationAPI
    destinationStop: FRFSStationAPI
    lineColor: Text
    lineColorCode : Text
    frequency: Seconds

  JourneyLegBusInfo:
    originStation: FRFSStationAPI
    destinationStation: FRFSStationAPI
    busCategory: Text
    routeNumber: Text
    frequency: Maybe Seconds
    startTime: Maybe TimeOfDay

  LegStatus:
    legOrder: Int
    status: JourneyLegStatus

  JourneyDetails:
    legDetails: [LegDetails]
    totalFare: Price

  LegDetails:
    legOrder: Int
    legFare: Price

  ExtendLegReq:
    legId: Id JourneyLeg
    endLeg: Id JourneyLeg
    endLocation: Maybe LatLong                          # if some other dest outside of journey

  RiderLocationReq:
    latLong: LatLong
    currTime: UTCTime

  SwitchLegReq:
    newMode: TravelMode
    currLocation: LatLong


apis:
  - POST:
      endpoint: /multimodal/{journeyId}/info
      params:
        journeyId: Id Journey
      request:
        type: JourneyInfoReq
      response:
        type: JourneyInfoResp
  - POST:
      endpoint: /multimodal/{journeyId}/confirm
      params:
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess
  - GET:
      endpoint: /multimodal/{journeyId}/booking/info
      params:
        journeyId: Id Journey
      response:
        type: JourneyInfoResp

  - POST:
      endpoint: /multimodal/{searchRequestId}/switchVariant/{estimateId}     # switch variant
      params:
        searchRequestId: Id SearchRequest
        estimateId: Id Estimate
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: /multimodal/{legId}/switch                          # combine with other legs if they match
      params:
        legId: Text
      request:
        type: SwitchLegReq
      response:
        type: Kernel.Types.APISuccess.APISuccess                    # send new leg

  - POST:
      endpoint: multimodal/journey/{journeyId}/leg/{legId}/skip
      params:
        journeyId: Id Journey
        legId: Id JourneyLeg
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: /multimodal/extend/{journeyId}/leg                    # only applicable for current leg
      request:
        type: ExtendLegReq
      params:
        legId: Text
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - GET:
      endpoint: /multimodal/journey/{journeyId}/status
      params:
        journeyId: Id Journey
      response:
        type: "[LegStatus]"

  - POST:
      endpoint: multimodal/journey/{journeyId}/cancel
      params:
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - GET:
      endpoint: multimodal/journey/{journeyId}/details
      params:
        journeyId: Id Journey
      response:
        type: JourneyDetails

  - POST:
      endpoint: multimodal/{journeyId}/rider/location
      params:
        journeyId: Id Journey
      request:
        type: RiderLocationReq
      response:
        type: Kernel.Types.APISuccess.APISuccess