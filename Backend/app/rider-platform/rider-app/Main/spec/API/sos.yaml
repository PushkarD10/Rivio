imports:
  Text: Data.Text
  Person: Domain.Types.Person
  Ride: Domain.Types.Ride
  SosType : Domain.Types.Sos
  SosStatus : Domain.Types.Sos
  Sos : Domain.Types.Sos

module: Sos
types:
  SosRes:
    sosId: Id Sos

  SosDetailsRes:
    sos: Maybe Sos

  SosReq:
    flow: SosType
    rideId: Id Ride

  SosUpdateReq:
    status: SosStatus
    comment: Maybe Text

  MockSosReq:
    onRide: Maybe Bool

  MarkAsSafeReq:
    isMock: Maybe Bool

apis:
  # GET /sos/getDetails
  - GET:
      endpoint: /sos/getDetails/{rideId}
      auth: TokenAuth
      params:
        rideId: Id Ride
      response:
        type: API.Types.UI.Sos.SosDetailsRes

  # # POST /sos/create
  - POST:
      endpoint: /sos/create
      auth: TokenAuth
      request:
        type: API.Types.UI.Sos.SosReq
      response:
        type: API.Types.UI.Sos.SosRes

  # # POST /sos/{sosId}/status
  - POST:
      endpoint: /sos/{sosId}/status
      auth: TokenAuth
      params:
        sosId: Id Sos
      request:
        type: API.Types.UI.Sos.SosUpdateReq
      response:
        type: Kernel.Types.APISuccess.APISuccess

  # # POST /sos/markRideAsSafe/{sosId}
  - POST:
      endpoint: /sos/markRideAsSafe/{sosId}
      auth: TokenAuth
      params:
        sosId: Id Sos
      request:
        type: API.Types.UI.Sos.MarkAsSafeReq
      response:
        type: Kernel.Types.APISuccess.APISuccess

  # # POST /sos/createMockSos
  - POST:
      endpoint: /sos/createMockSos
      auth: TokenAuth
      request:
        type: API.Types.UI.Sos.MockSosReq
      response:
        type: Kernel.Types.APISuccess.APISuccess