imports:
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Merchant: Domain.Types.Merchant
  HighPrecMoney: Kernel.Types.Common
  Price: Kernel.Types.Common
  Currency: Kernel.Types.Common
  UTCTime: Kernel.Prelude
  Person: Domain.Types.Person
  ShortId: Kernel.Types.Id
  TicketBookingService: Domain.Types.TicketBookingService
  TicketBookingServiceCategory: Domain.Types.TicketBookingServiceCategory
  TicketBookingPeopleCategory: Domain.Types.TicketBookingPeopleCategory
  TicketBooking: Domain.Types.TicketBooking
  TicketPlace: Domain.Types.TicketPlace
  TicketService: Domain.Types.TicketService
  BusinessHour: Domain.Types.BusinessHour
  SpecialOccasion: Domain.Types.SpecialOccasion
  ServiceCategory: Domain.Types.ServiceCategory
  ServicePeopleCategory: Domain.Types.ServicePeopleCategory
  BusinessHourType: Domain.Types.BusinessHour
  Value: Data.Aeson

TicketPlace:
  tableName: ticket_place

  fields:
    id : Id TicketPlace
    merchantOperatingCityId : Id MerchantOperatingCity
    name : Text
    description : Maybe Text
    lat : Maybe Double
    lon : Maybe Double
    gallery : "[Text]"
    shortDesc : Text
    iconUrl : Maybe Text
    termsAndConditions : "[Text]"
    placeType : PlaceType #
    mapImageUrl : Maybe Text
    openTimings : Maybe TimeOfDay
    closeTimings : Maybe TimeOfDay
    status : PlaceStatus

  types:
    PlaceType:
      enum: "Museum,ThemePark,AmusementPark,WaterPark,WildLifeSanctuary,ArtGallery,HeritageSite,ReligiousSite,Other"
    PlaceStatus:
      enum: "Active,Inactive,ComingSoon"

  default:
    termsAndConditions: "'{}'"
    placeType: "'Other'"
    shortDesc: "'Short description not available'"
    status: "'Active'"

  queries:
    getTicketPlaces:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId
    findById:
      kvFunction: findOneWithKV
      where: id

TicketService:
  tableName : ticket_service

  fields :
    id : Id TicketService
    placesId : Text
    service : Text
    shortDesc : Maybe Text
    operationalDays : "[Text]"
    maxVerification : Int
    allowFutureBooking : Bool
    allowCancellation : Bool
    expiry : ExpiryType
    businessHours : "[Id BusinessHour]"
  types:
    ExpiryType:
      enum: "InstantExpiry Kernel.Prelude.Int,VisitDate Kernel.Prelude.TimeOfDay"

  default:
    operationalDays: "'{Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday}'"
    allowFutureBooking: "true"
    allowCancellation: "false"
    business_hours: "'{}'"
    expiry: "'VisitDate 12:00:00'"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    getTicketServicesByPlaceId:
      kvFunction: findAllWithKV
      where: placesId

  extraOperations:
    - EXTRA_QUERY_FILE

SpecialOccasion:
  tableName : special_occasion

  fields :
    id : Id SpecialOccasion
    entityId : Text
    date : Maybe Day
    dayOfWeek : Maybe Text
    specialDayType : SpecialDayType
    description : Maybe Text
    businessHours : "[Id BusinessHour]"

  types:
    SpecialDayType:
      enum: "Open,Closed"

  queries:
    findSpecialOccasionByEntityIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [entityId, date]
    findAllSpecialOccasionByEntityId:
      kvFunction: findAllWithKV
      where:
        and: [entityId, date]
    findSpecialOccasionByEntityIdAndDayOfWeek:
      kvFunction: findOneWithKV
      where:
        and: [entityId, dayOfWeek]
    updateBusinessHoursById:
      kvFunction: updateOneWithKV
      params: [businessHours]
      where: id
    findBySplDayAndEntityIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [specialDayType, entityId, date]

BusinessHour:
  tableName: business_hour

  fields:
    id: Id BusinessHour
    btype: BusinessHourType # Slot TimeOfDay | Duration TimeOfDay TimeOfDay
    categoryId: "[Id ServiceCategory]"
  types:
    BusinessHourType:
      enum: "Slot Kernel.Prelude.TimeOfDay,Duration Kernel.Prelude.TimeOfDay Kernel.Prelude.TimeOfDay"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

ServiceCategory:
  tableName: service_category

  fields:
    id: Id ServiceCategory
    name: Text
    description: Text
    availableSeats: Maybe Int
    allowedSeats: Maybe Int
    peopleCategory: "[Id ServicePeopleCategory]"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

ServicePeopleCategory:
  tableName: service_people_category
  derives: "Generic,Show"
  fields:
    id: Id ServicePeopleCategory
    name: Text
    description: Text
    pricePerUnit: Price
    cancellationCharges: "Maybe [CancellationCharge]"

  beamType:
    cancellationCharges: Maybe Value

  sqlType:
    cancellationCharges: json

  beamFields:
    pricePerUnit:
      currency: Maybe Currency
      pricePerUnit: HighPrecMoney

  fromTType:
    pricePerUnit: Kernel.Types.Common.mkPrice currency pricePerUnit|E
    cancellationCharges: getCancellationChargesFromTable

  toTType:
    pricePerUnit: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    cancellationCharges: convertCancellationChargesToTable

  types:
    CancellationCharge:
      time: Seconds
      cancelCharge: CancelCharge
      derive: "'ListInstance, Eq, Ord, Read"
    CancelCharge:
      enum: "FlatFee HighPrecMoney,Percentage Int"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

SeatManagement:
  tableName: seat_management

  fields:
    id: Id SeatManagement
    date: Day
    ticketServiceCategoryId: Id ServiceCategory
    booked: Int
    blocked: Int

  default:
    booked: "0"
    blocked: "0"

  queries:
    findByTicketServiceCategoryIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [ticketServiceCategoryId, date]
    updateBookedSeats:
      kvFunction: updateWithKV
      params: [booked]
      where:
        and: [ticketServiceCategoryId, date]
    updateBlockedSeats:
      kvFunction: updateWithKV
      params: [blocked]
      where:
        and: [ticketServiceCategoryId, date]
    updateBookedAndBlockedSeats:
      kvFunction: updateOneWithKV
      params: [booked, blocked]
      where:
        and: [ticketServiceCategoryId, date]


### Ticket Booking ###
TicketBooking:
  tableName: ticket_booking
  derives: "Generic,Show"
  fields:
    id: Id TicketBooking
    shortId: ShortId TicketBooking
    merchantOperatingCityId: Id MerchantOperatingCity
    ticketPlaceId: Id TicketPlace
    personId: Id Person
    amount: Price
    visitDate: Day
    status: BookingStatus
    createdAt: UTCTime
    updatedAt: UTCTime
    bookedSeats: Int
    cancelledSeats: Maybe Int

  beamFields:
    amount:
      currency: Maybe Currency
      amount: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency amount|E

  toTType:
    amount: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  constraints:
    id: PrimaryKey
    shortId: SecondaryKey
    personId: SecondaryKey

  types:
    BookingStatus:
      enum: "Pending,Failed,Booked,Cancelled"
      derive: HttpInstance

  default:
    bookedSeats: "0"

  queries:
    updateStatusByShortId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: shortId
    findById:
      kvFunction: findOneWithKV
      where: id
    findByShortId:
      kvFunction: findOneWithKV
      where: shortId
    getAllBookingsByPersonId:
      kvFunction: findAllWithOptionsKV
      where:
        and: [personId, merchantOperatingCityId, status]
    getAllBookingsByPlaceIdAndVisitDate:
      kvFunction: findAllWithKV
      where:
        and: [ticketPlaceId, visitDate, status]
    updateStatusAndCancelledSeatsById:
      kvFunction: updateOneWithKV
      params: [status, cancelledSeats, updatedAt]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE

TicketBookingService:
  tableName: ticket_booking_service
  derives: "Generic,Show"
  fields:
    id: Id TicketBookingService
    shortId: ShortId TicketBookingService
    ticketBookingId: Id TicketBooking
    ticketServiceId: Id TicketService
    merchantOperatingCityId: Id MerchantOperatingCity
    amount: Price
    status: ServiceStatus
    verificationCount: Int
    visitDate: Maybe Day
    btype: BusinessHourType
    bHourId: Maybe (Id BusinessHour)
    expiryDate: Maybe UTCTime
    createdAt: UTCTime
    updatedAt: UTCTime
    bookedSeats: Int
    cancelledSeats: Maybe Int

  beamFields:
    amount:
      currency: Maybe Currency
      amount: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency amount|E

  toTType:
    amount: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  types:
    ServiceStatus:
      enum: "Pending,Failed,Confirmed,Verified,Cancelled"

  default:
    btype: "'Duration 03:30:00 12:00:00'"
    bookedSeats: "0"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByShortId:
      kvFunction: findOneWithKV
      where: shortId
    findAllByBookingId:
      kvFunction: findAllWithKV
      where: ticketBookingId
    updateAllStatusByBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: ticketBookingId
    updateVerificationById:
      kvFunction: updateWithKV
      params: [status, verificationCount, updatedAt]
      where: id
    updateStatusAndCancelledSeatsById:
      kvFunction: updateOneWithKV
      params: [status, cancelledSeats, updatedAt]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE

TicketBookingServiceCategory:
  tableName: ticket_booking_service_category
  derives: "Generic,Show"
  fields:
    id: Id TicketBookingServiceCategory
    ticketBookingServiceId: Id TicketBookingService
    name: Text
    bookedSeats: Int
    amount: Price
    eventCancelledBy: Maybe CancelledBy
    cancelledSeats: Maybe Int
    amountToRefund: Maybe HighPrecMoney
    serviceCategoryId: Maybe Text
    visitDate: Maybe Day
    btype: Maybe BusinessHourType

  beamFields:
    amount:
      currency: Maybe Currency
      amount: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency amount|E

  toTType:
    amount: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  types:
    CancelledBy:
        enum: "User,Merchant"

  queries:
    findAllByTicketBookingServiceId:
      kvFunction: findAllWithKV
      where: ticketBookingServiceId
    updateCancellationDetailsById:
      kvFunction: updateWithKV
      params: [cancelledSeats, amountToRefund, eventCancelledBy]
      where: id
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByServiceCategoryIdDateAndBtype:
      kvFunction: findAllWithKV
      where:
        and: [serviceCategoryId, visitDate, btype]

  default:
    bookedSeats: "0"

  extraOperations:
    - EXTRA_QUERY_FILE

TicketBookingPeopleCategory:
  tableName: ticket_booking_people_category
  derives: "Generic,Show"
  fields:
    id: Id TicketBookingPeopleCategory
    ticketBookingServiceCategoryId: Id TicketBookingServiceCategory
    peopleCategoryId: Maybe (Id ServicePeopleCategory)
    name: Text
    pricePerUnit: Price
    numberOfUnits: Int
    numberOfUnitsCancelled: Maybe Int
    amountToRefund: Maybe HighPrecMoney

  beamFields:
    pricePerUnit:
      currency: Maybe Currency
      pricePerUnit: HighPrecMoney

  fromTType:
    pricePerUnit: Kernel.Types.Common.mkPrice currency pricePerUnit|E

  toTType:
    pricePerUnit: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByServiceCategoryId:
      kvFunction: findAllWithKV
      where: ticketBookingServiceCategoryId
    updateTicketPeopleUnitsAndAmountById:
      kvFunction: updateWithKV
      params: [numberOfUnitsCancelled,amountToRefund]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE