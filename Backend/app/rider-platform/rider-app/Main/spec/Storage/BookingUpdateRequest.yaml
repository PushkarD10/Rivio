imports:
  Booking: Domain.Types.Booking
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Price: Kernel.Types.Common


BookingUpdateRequest:
  tableName: booking_update_request
  types:
    BookingUpdateRequestStatus:
      enum: "SOFT,CONFIRM"
      derive: "HttpInstance"

  beamInstance: MakeTableInstancesWithTModifier []

  fields:
    id: Id BookingUpdateRequest
    bookingId: Id Booking
    status: BookingUpdateRequestStatus
    travelledDistance: Maybe HighPrecMeters
    estimatedDistance : Maybe HighPrecMeters
    estimatedFare : Maybe HighPrecMoney
    totalDistance : Maybe HighPrecMeters
    currentPointLat : Maybe Double
    currentPointLon : Maybe Double
    oldEstimatedFare : HighPrecMoney
    oldEstimatedDistance : Maybe HighPrecMeters
    distanceUnit : DistanceUnit
    createdAt: UTCTime
    updatedAt: UTCTime
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity

  beamType:
    distanceUnit: Maybe DistanceUnit

  fromTType:
    distanceUnit: Kernel.Prelude.fromMaybe Kernel.Types.Common.Meter|I

  toTType:
    distanceUnit: Kernel.Prelude.Just|I


  constraints:
    id: PrimaryKey
    bookingId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where:
        and: [id]
    findAllByBookingId:
      kvFunction: findAllWithKV
      where:
        and: [bookingId]
    updateMultipleById:
      kvFunction: updateOneWithKV
      params: [travelledDistance, estimatedDistance, estimatedFare, totalDistance, currentPointLat, currentPointLon, updatedAt]
      where: id
    updateStatusById:
      kvFunction: updateOneWithKV
      params: [status, updatedAt]
      where: id