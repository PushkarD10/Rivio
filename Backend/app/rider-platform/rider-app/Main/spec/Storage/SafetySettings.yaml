imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  RideShareOptions : Domain.Types.Person
  Person : Domain.Types.Person
SafetySettings:
  tableName: safety_settings


  fields:
    personId : Id Person
    nightSafetyChecks : Bool
    hasCompletedMockSafetyDrill : Maybe Bool
    hasCompletedSafetySetup : Bool
    falseSafetyAlarmCount : Int
    safetyCenterDisabledOnDate : Maybe UTCTime
    informPoliceSos : Bool
    autoCallDefaultContact : Bool
    notifySosWithEmergencyContacts : Bool
    enableUnexpectedEventsCheck : Bool
    enablePostRideSafetyCheck : Bool
    notifySafetyTeamForSafetyCheckFailure : Bool
    shakeToActivate : Bool
    enableOtpLessRide : Bool
    hasSetupRideOtp : Bool

  beamType:
    falseSafetyAlarmCount: Maybe Int

  fromTType:
    falseSafetyAlarmCount: fromMaybe 0 falseSafetyAlarmCount|E

  toTType:
    falseSafetyAlarmCount: (Just falseSafetyAlarmCount)|E

  constraints:
    personId: PrimaryKey

  default:
    nightSafetyChecks : "false"
    hasCompletedMockSafetyDrill : "false"
    hasCompletedSafetySetup : "false"
    informPoliceSos : "false"
    autoCallDefaultContact : "false"
    notifySosWithEmergencyContacts : "false"
    enableUnexpectedEventsCheck : "false"
    enablePostRideSafetyCheck : "false"
    notifySafetyTeamForSafetyCheckFailure : "false"
    shakeToActivate : "false"
    enableOtpLessRide : "false"
    hasSetupRideOtp : "false"



  queries:
    updateEmergencyContactStatus:
      kvFunction: updateWithKV
      params: [autoCallDefaultContact,notifySosWithEmergencyContacts]
      where: personId

    updateMockSafetyDrillStatus:
      kvFunction: updateWithKV
      params: [hasCompletedMockSafetyDrill]
      where: personId



  extraOperations:
  - EXTRA_QUERY_FILE

  excludedFields: [merchantOperatingCityId,merchantId, createdAt]