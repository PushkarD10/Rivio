imports:
  Person: Domain.Types.Person
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  UTCTime: Kernel.Prelude
  EncryptedHashedField: Kernel.External.Encryption
  DbHash: Kernel.External.Encryption
  Variant: Domain.Types.Vehicle
  Category: Domain.Types.Vehicle
  Value: Data.Aeson
  DocumentType: Domain.Types.DocumentVerificationConfig
  Image: Domain.Types.Image
  DriverOnboardingError: Tools.Error
  VerificationStatus: Kernel.Types.Documents
  BaseUrl: Servant.Client.Core
  showBaseUrl: Kernel.Prelude
  parseBaseUrl: Kernel.Prelude
  AccountId: Kernel.External.Payment.Stripe.Types

IdfyVerification:
  tableName: idfy_verification
  fields:
    id: Id IdfyVerification
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverId: Id Person
    requestId: Text
    docType: DocumentType
    vehicleCategory: Maybe Category
    status: Text
    issueDateOnDoc: Maybe UTCTime
    driverDateOfBirth: Maybe UTCTime
    documentNumber: EncryptedHashedField e Text
    imageExtractionValidation: ImageExtractionValidation
    idfyResponse: Maybe Text
    multipleRC: Maybe Bool
    retryCount: Maybe Int
    airConditioned: Maybe Bool
    oxygen: Maybe Bool
    ventilator: Maybe Bool
    nameOnCard: Maybe Text
  beamInstance: MakeTableInstancesWithTModifier [("multipleRC", "multiple_r_c")]
  types:
    ImageExtractionValidation:
      enum: "Success,Skipped,Failed"
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    requestId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByDriverId:
      kvFunction: findAllWithKV
      where: driverId
    findAllByDriverIdAndDocType:
      kvFunction: findAllWithKV
      where:
        and: [driverId, docType]
    findLatestByDriverIdAndDocType:
      kvFunction: findAllWithOptionsKV
      where:
        and: [driverId, docType]
    findByRequestId:
      kvFunction: findOneWithKV
      where: requestId
    updateResponse:
      kvFunction: updateWithKV
      params: [status, idfyResponse]
      where: requestId
    updateStatus:
      kvFunction: updateWithKV
      params: [status]
      where: requestId
    updateExtractValidationStatus:
      kvFunction: updateWithKV
      params: [imageExtractionValidation]
      where: requestId
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

AadhaarOtpVerify:
  tableName: aadhaar_otp_verify
  fields:
    id: Id AadhaarOtpVerify
    driverId: Id Person
    requestId: Text
    statusCode: Text
    transactionId: Text
    requestMessage: Text
  excludedFields: [merchantOperatingCityId, merchantId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
  queries:
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

AadhaarOtpReq:
  tableName: aadhaar_otp_req
  fields:
    id: Id AadhaarOtpReq
    driverId: Id Person
    requestId: Text
    statusCode: Text
    transactionId: Maybe Text
    requestMessage: Text
  excludedFields: [merchantOperatingCityId, merchantId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
  queries:
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

AadhaarVerification:
  tableName: aadhaar_verification
  fields:
    driverId: Id Person
    driverName: Text
    driverGender: Text
    driverDob: Text
    driverImage: Maybe Text
    aadhaarNumberHash: Maybe DbHash
    isVerified: Bool
    driverImagePath: Maybe Text
  excludedFields: [merchantOperatingCityId, merchantId]
  derives: "Generic,Show,ToJSON,FromJSON"
  constraints:
    driverId: PrimaryKey
    aadhaarNumberHash: SecondaryKey
  queries:
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    findByAadhaarNumberHash:
      kvFunction: findOneWithKV
      where: aadhaarNumberHash
    findByPhoneNumberAndUpdate:
      kvFunction: updateWithKV
      params: [driverName, driverGender, driverDob, aadhaarNumberHash, isVerified]
      where: driverId
    updateDriverImagePath:
      kvFunction: updateOneWithKV
      params: [driverImagePath]
      where: driverId

DriverLicense:
  tableName: driver_license
  fields:
    id: Id DriverLicense
    driverId: Id Person
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverDob: Maybe UTCTime
    driverName: Maybe Text
    licenseNumber: EncryptedHashedField e Text
    licenseExpiry: UTCTime
    classOfVehicles: '[Text]'
    failedRules: '[Text]'
    verificationStatus: VerificationStatus
    consent: Bool
    consentTimestamp: UTCTime
    dateOfIssue: Maybe UTCTime
  excludedFields: [merchantOperatingCityId]

  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    licenseNumberHash: SecondaryKey
    documentImageId1: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    updateVerificationStatus:
      kvFunction: updateWithKV
      params: [verificationStatus]
      where: documentImageId1
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId1
  extraOperations:
    - EXTRA_QUERY_FILE

VehicleRegistrationCertificate:
  tableName: vehicle_registration_certificate
  fields:
    id: Id VehicleRegistrationCertificate
    documentImageId: Id Image
    certificateNumber: EncryptedHashedField e Text
    fitnessExpiry: UTCTime
    permitExpiry: Maybe UTCTime
    pucExpiry: Maybe UTCTime
    insuranceValidity: Maybe UTCTime
    vehicleClass: Maybe Text
    vehicleVariant: Maybe Variant
    failedRules: '[Text]'
    vehicleManufacturer: Maybe Text
    vehicleCapacity: Maybe Int
    vehicleModel: Maybe Text
    manufacturerModel: Maybe Text
    vehicleColor: Maybe Text
    vehicleEnergyType: Maybe Text
    vehicleDoors: Maybe Int
    vehicleSeatBelts: Maybe Int
    reviewedAt: Maybe UTCTime
    reviewRequired: Maybe Bool
    verificationStatus: VerificationStatus
    fleetOwnerId: Maybe Text
    airConditioned: Maybe Bool
    oxygen: Maybe Bool
    ventilator: Maybe Bool
    luggageCapacity: Maybe Int
    vehicleRating: Maybe Double
    userPassedVehicleCategory: Maybe Category
    vehicleModelYear: Maybe Int
    dateOfRegistration: Maybe UTCTime
  constraints:
    id: PrimaryKey
    certificateNumberHash: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    updateFleetOwnerId:
      kvFunction: updateWithKV
      params: [fleetOwnerId]
      where: id
    findByRCIdAndFleetOwnerId:
      kvFunction: findOneWithKV
      where:
        and: [id, fleetOwnerId]
    findAllByFleetOwnerId:
      kvFunction: findAllWithOptionsKV
      where: fleetOwnerId
      orderBy: updatedAt
    updateAirConditioned:
      kvFunction: updateOneWithKV
      params: [airConditioned]
      where: id
    updateOxygen:
      kvFunction: updateWithKV
      params: [oxygen]
      where: id
    updateVentilator:
      kvFunction: updateWithKV
      params: [ventilator]
      where: id
    updateVerificationStatus:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
  extraOperations:
    - EXTRA_QUERY_FILE

DriverRCAssociation:
  tableName: driver_rc_association
  fields:
    id: Id DriverRCAssociation
    driverId: Id Person
    rcId: Id VehicleRegistrationCertificate
    associatedOn: UTCTime
    associatedTill: Maybe UTCTime
    consent: Bool
    consentTimestamp: UTCTime
    isRcActive: Bool
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    rcId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    findActiveAssociationByRC:
      kvFunction: findOneWithKV
      where:
        and: [rcId, isRcActive]
    findActiveAssociationByDriver:
      kvFunction: findOneWithKV
      where:
        and: [driverId, isRcActive]
    deactivateRCForDriver:
      kvFunction: updateWithKV
      params: [isRcActive]
      where:
        and: [driverId, rcId]
  extraOperations:
    - EXTRA_QUERY_FILE

Image:
  tableName: image
  fields:
    id: Id Image
    personId: Id Person
    merchantId: Id Merchant
    s3Path: Text
    imageType: DocumentType
    failureReason: Maybe DriverOnboardingError
    rcId: Maybe Text
    verificationStatus: Maybe VerificationStatus
    documentExpiry: Maybe UTCTime
  excludedFields: [merchantOperatingCityId]
  constraints:
    id: PrimaryKey
    personId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findImagesByPersonAndType:
      kvFunction: findAllWithKV
      where:
        and: [merchantId, personId, imageType]
    findByMerchantId:
      kvFunction: findAllWithDb
      where: merchantId
    addFailureReason:
      kvFunction: updateWithKV
      params: [failureReason]
      where: id
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: personId
    updateDocumentExpiry:
      kvFunction: updateOneWithKV
      params: [documentExpiry]
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE

DocumentVerificationConfig:
  tableName: document_verification_config
  types:
    VehicleClassVariantMap:
      vehicleClass: Text
      vehicleCapacity: Maybe Int
      vehicleVariant: Variant
      manufacturer: Maybe Text
      manufacturerModel: Maybe Text
      vehicleModel: Maybe Text
      reviewRequired: Maybe Bool
      bodyType: Maybe Text
      priority: Maybe Int
      derive: "Eq, Ord, Read"
    SupportedVehicleClasses:
      enum: "DLValidClasses [Text],RCValidClasses [VehicleClassVariantMap]"
    DocumentType:
      enum: "DriverLicense,VehicleRegistrationCertificate,Permissions,SubscriptionPlan,ProfilePhoto,AadhaarCard,PanCard,VehiclePermit,VehicleFitnessCertificate,VehicleInsurance,VehiclePUC,ProfileDetails,SocialSecurityNumber,VehicleInspectionForm,UploadProfile,GSTCertificate"
    VehicleClassCheckType:
      enum: "Infix,Prefix,Suffix"
  fields:
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    vehicleCategory: Category
    documentType: DocumentType
    title: Text
    description: Maybe Text
    isMandatory: Bool
    isDisabled: Bool
    disableWarning: Maybe Text
    isHidden: Bool
    dependencyDocumentType: '[DocumentType]'
    checkExtraction: Bool
    checkExpiry: Bool
    supportedVehicleClasses: SupportedVehicleClasses
    vehicleClassCheckType: VehicleClassCheckType
    rcNumberPrefixList: '[Text]'
    maxRetryCount: Int
    isDefaultEnabledOnManualVerification: Bool
    isImageValidationRequired: Bool
    doStrictVerifcation: Bool
    order: Int
  default:
    order: "0"
    doStrictVerifcation: "true"
    isDefaultEnabledOnManualVerification: "true"
    isImageValidationRequired: "true"
  constraints:
    merchantOperatingCityId: PrimaryKey
    vehicleCategory: PrimaryKey
    documentType: PrimaryKey
  sqlType:
    dependencyDocumentType: text[]
    supportedVehicleClassesJSON: json
  beamFields:
    supportedVehicleClasses:
     supportedVehicleClassesJSON: Value
  toTType:
    supportedVehicleClassesJSON: getConfigJSON
  fromTType:
    supportedVehicleClasses: (getConfigFromJSON documentType)|M
  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithOptionsKV
      where: merchantOperatingCityId
      orderBy:
        field: order
        order: asc
  extraOperations:
    - EXTRA_QUERY_FILE

VehiclePermit:
  tableName: vehicle_permit
  fields:
    id: Id VehiclePermit
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    permitNumber: EncryptedHashedField e Text
    permitExpiry: UTCTime
    regionCovered: Text
    nameOfPermitHolder: Maybe Text
    issueDate: Maybe UTCTime
    purposeOfJourney: Maybe Text
    verificationStatus: VerificationStatus
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]

VehicleInsurance:
  tableName: vehicle_insurance
  fields:
    id: Id VehicleInsurance
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    policyNumber: EncryptedHashedField e Text
    policyExpiry: UTCTime
    policyProvider: Text
    insuredName: Maybe Text
    issueDate: Maybe UTCTime
    limitsOfLiability: Maybe Text
    verificationStatus: VerificationStatus
  constraints:
    id: PrimaryKey
    documentImageId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    updateVerificationStatus:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId

VehicleFitnessCertificate:
  tableName: vehicle_fitness_certificate
  fields:
    id: Id VehicleFitnessCertificate
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    applicationNumber: EncryptedHashedField e Text
    fitnessExpiry: UTCTime
    inspectingAuthority: Maybe Text
    receiptDate: Maybe UTCTime
    inspectingOn: Maybe UTCTime
    nextInspectionDate: Maybe UTCTime
    categoryOfVehicle: Maybe Text
    verificationStatus: VerificationStatus
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    updateVerificationStatus:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
    documentImageId: SecondaryKey

VehiclePUC:
  tableName: vehicle_puc
  fields:
    id: Id VehiclePUC
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    pucExpiry: UTCTime
    verificationStatus: VerificationStatus
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]

FleetRCAssociation:
  tableName: fleet_rc_association
  fields:
    id: Id FleetRCAssociation
    fleetOwnerId: Id Person
    rcId: Id VehicleRegistrationCertificate
    associatedOn: UTCTime
    associatedTill: Maybe UTCTime
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE


DriverSSN:
  tableName: driver_ssn
  fields:
    id: Id DriverSSN
    driverId: Id Person
    ssn: EncryptedHashedField e Text
    verificationStatus: VerificationStatus
    rejectReason: Maybe Text
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    ssnHash: SecondaryKey
  queries:
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
  extraOperations:
    - EXTRA_QUERY_FILE
  excludedFields: [merchantId, merchantOperatingCityId, createdAt, updatedAt]

DriverPanCard:
  tableName: driver_pan_card
  fields:
    id: Id DriverPanCard
    driverId: Id Person
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverDob: Maybe UTCTime
    driverName: Maybe Text
    panCardNumber: EncryptedHashedField e Text
    failedRules: '[Text]'
    verificationStatus: VerificationStatus
    consent: Bool
    consentTimestamp: UTCTime
  excludedFields: [merchantOperatingCityId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    panCardNumberHash: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
  extraOperations:
    - EXTRA_QUERY_FILE

DriverBankAccount:
  tableName: driver_bank_account
  fields:
    driverId: Id Person
    accountId: AccountId
    chargesEnabled: Bool
    detailsSubmitted: Bool
    currentAccountLink: Maybe BaseUrl
    currentAccountLinkExpiry: Maybe UTCTime
  constraints:
    driverId: PrimaryKey
    accountId: SecondaryKey
  beamType:
    currentAccountLink: Maybe Text
  toTType:
    currentAccountLink: Kernel.Prelude.fmap showBaseUrl|I
  fromTType:
    currentAccountLink: Kernel.Prelude.mapM parseBaseUrl|MI
  queries:
    updateAccountLink:
      kvFunction: updateOneWithKV
      params: [currentAccountLink, currentAccountLinkExpiry]
      where: driverId
    updateAccountStatus:
      kvFunction: updateOneWithKV
      params: [chargesEnabled, detailsSubmitted]
      where: driverId

FleetOwnerDocumentVerificationConfig:
  tableName: fleet_owner_document_verification_config
  fields:
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    documentType: DocumentType
    title: Text
    description: Maybe Text
    isMandatory: Bool
    isDisabled: Bool
    disableWarning: Maybe Text
    isHidden: Bool
    dependencyDocumentType: '[DocumentType]'
    isDefaultEnabledOnManualVerification: Bool
    isImageValidationRequired: Bool
    checkExtraction: Bool
    checkExpiry: Bool
    maxRetryCount: Int
    doStrictVerifcation: Bool
    order: Int
  default:
    order: "0"
  constraints:
    merchantOperatingCityId: PrimaryKey
    documentType: PrimaryKey
  sqlType:
    dependencyDocumentType: text[]
  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithOptionsKV
      where: merchantOperatingCityId
      orderBy:
        field: order
        order: asc