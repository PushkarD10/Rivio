imports:
  Ride: Domain.Types.Ride
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Location: Domain.Types.Location
  UTCTime: Kernel.Prelude
  LatLong: Kernel.External.Maps


StopInformation:
  tableName: stop_information
  derives: "Generic,Show,ToJSON,FromJSON,ToSchema"
  beamInstance: MakeTableInstancesWithTModifier []

  fields:
    id: Id StopInformation
    rideId : Id Ride
    waitingTimeStart : UTCTime
    waitingTimeEnd : Maybe UTCTime
    stopStartLatLng : LatLong
    stopEndLatLng : Maybe LatLong
    stopOrder : Int
    stopLocId : Id Location
    createdAt: UTCTime
    updatedAt: UTCTime

  beamFields:
    stopStartLatLng:
      stopStartLat: Double
      stopStartLon: Double
    stopEndLatLng:
      stopEndLat: Maybe Double
      stopEndLon: Maybe Double


  fromTType:
    stopStartLatLng: Storage.Queries.Transformers.Ride.mkLatLong'|I
    stopEndLatLng: Storage.Queries.Transformers.Ride.mkLatLong|I


  toTType:
    stopStartLat: (.lat)|I
    stopStartLon: (.lon)|I
    stopEndLat: Kernel.Prelude.fmap (.lat)|I
    stopEndLon: Kernel.Prelude.fmap (.lon)|I

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
        # and: [id]
    findAllByRideId:
      kvFunction: findAllWithKVAndConditionalDB
      where: rideId
    updateByStopLocIdAndRideId:
      kvFunction: updateOneWithKV
      params: [waitingTimeEnd, stopEndLatLng]
      where:
        and: [stopLocId, rideId]

  constraints:
    id: PrimaryKey
    rideId: SecondaryKey
    stopLocId: SecondaryKey
