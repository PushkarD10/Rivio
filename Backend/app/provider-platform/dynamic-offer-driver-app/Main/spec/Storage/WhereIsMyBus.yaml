imports:
  Text: Data.Text
  LatLong: Kernel.External.Maps.Types
  ServiceTierType: Domain.Types.Common
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  EncryptedHashedField: Kernel.External.Encryption
  Person: Domain.Types.Person

VehicleRouteMapping:
  tableName: vehicle_route_mapping

  fields:
    fleetOwnerId: Id Person
    vehicleNumber: EncryptedHashedField e Text
    routeCode: Text
    vehicleColor: Text
    vehicleModel: Text
    vehicleClass: Text
    vehicleServiceTierType: ServiceTierType
    blocked: Bool

  constraints:
    vehicleNumber: PrimaryKey
    routeCode: PrimaryKey

  # queries:
  #   findAllRouteMappings:
  #     kvFunction: findAllWithKV
  #     where: vehicleNumberHash
  #   # findOneMapping:
  #   #   kvFunction: findOneWithKV
  #   #   where:
  #   #     and: [vehicleNumberHash, routeCode]

  extraOperations:
    - EXTRA_QUERY_FILE

TripTransaction:
  tableName: trip_transaction

  types:
    TripStatus:
      enum: "TRIP_ASSIGNED, IN_PROGRESS, PAUSED, COMPLETED, CANCELLED"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

  fields:
    id: Id TripTransaction
    fleetOwnerId: Id Person
    vehicleNumber: Text
    tripCode: Maybe Text
    driverId: Id Person
    routeCode: Text
    status: TripStatus
    isCurrentlyDeviated: Bool
    deviationCount: Int
    startLocation: Maybe LatLong
    endLocation: Maybe LatLong
    startedNearStopCode: Maybe Text
    endStopCode: Text
    allowEndingMidRoute: Bool
    sequenceNumber: Int

  constraints:
    id: PrimaryKey

  beamFields:
    startLocation:
      startLocationLat: Maybe Double
      startLocationLon: Maybe Double
    endLocation:
      endLocationLat: Maybe Double
      endLocationLon: Maybe Double

  toTType:
    startLocationLat: Kernel.Prelude.fmap (.lat)|I
    startLocationLon: Kernel.Prelude.fmap (.lon)|I
    endLocationLat: Kernel.Prelude.fmap (.lat)|I
    endLocationLon: Kernel.Prelude.fmap (.lon)|I
  fromTType:
    startLocation: Storage.Queries.Transformers.Ride.mkLatLong|I
    endLocation: Storage.Queries.Transformers.Ride.mkLatLong|I
  domainInstance:
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnumAndList <TripStatus>
  queries:
    findByTransactionId:
      kvFunction: findOneWithKV
      where: id
    updateOnStart:
      kvFunction: updateOneWithKV
      params: [routeCode, startLocation, status]
      where: id
    findAllTripTransactionByDriverId:
      kvFunction: findAllWithKV
      where: driverId
    updateStatus:
      kvFunction: updateOneWithKV
      params: [status, endLocation]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE

ApprovalRequest:
  tableName: approval_request

  types:
    RequestStatus:
      enum: "ACCEPTED, REJECTED, PENDING"

    ApprovalRequestData:
      enum: "WmbEndTrip WmbEndTripData"

    WmbEndTripData:
      lat: Double
      lon: Double
      reason: Maybe Text
      tripTransactionId: Id TripTransaction
      derive: "Eq,Ord,Read"

  fields:
    id: Id ApprovalRequest
    requestType: ApprovalRequestData
    title: Text
    body: Text
    status: RequestStatus
    reason: Maybe Text
    createdAt: UTCTime
    updatedAt: UTCTime

  constraints:
    id: PrimaryKey

FleetConfig:
  tableName: fleet_config

  fields:
    rideEndApproval: Bool
    allowEndingMidRoute: Bool
    fleetOwnerId: Id Person
    endRideDistanceThreshold: HighPrecMeters
  beamType:
    endRideDistanceThreshold: Maybe HighPrecMeters
  toTType:
    endRideDistanceThreshold: Just endRideDistanceThreshold|E
  fromTType:
    endRideDistanceThreshold: fromMaybe 100 endRideDistanceThreshold|E
  sqlType:
    endRideDistanceThreshold: double precision
  default:
    endRideDistanceThreshold: "100"

  constraints:
    fleetOwnerId: PrimaryKey
