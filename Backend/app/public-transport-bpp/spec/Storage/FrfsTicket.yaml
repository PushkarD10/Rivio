imports:
  UTCTime: Kernel.Prelude
  HighPrecMoney: Kernel.Types.Common
  Currency: Kernel.Types.Common
  ShortId: Kernel.Types.Id
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  City: Kernel.Types.Beckn.Context
  LatLong: Kernel.External.Maps.Types

FRFSSearchRequest:
  tableName: frfs_search_request

  fields:
    transactionId: Id FRFSSearchRequest
    bapId: Text
    bapUri: Maybe Text
    bppId: Text
    sourceStationId: Maybe (Id Station)
    destinationStationId: Maybe (Id Station)
    quantity: Int
    createdAt: UTCTime
    updatedAt: UTCTime

  constraints:
    transactionId: "PrimaryKey"

  queries:
    findByTrasactionId:
      kvFunction: findOneWithKV
      where: transaction_id

    findAllByBapId:
      kvFunction: findAllWithKV
      where: bapId

    updateSourceStationByTrasactionId:
      kvFunction: updateWithKV
      params: sourceStationId
      where: transaction_id

    updateDestinationStationByTrasactionId:
      kvFunction: updateWithKV
      params: destinationStationId
      where: transaction_id

    updateQuantityByTrasactionId:
      kvFunction: updateWithKV
      params: [quantity, updatedAt]
      where: transaction_id

    deleteByTransactionId:
      kvFunction: deleteWithKV
      where: transactionId



FRFSTicketBooking:
  tableName: frfs_ticket_booking

  fields:
    id: Id FRFSTicketBooking
    transactionId: Id FRFSSearchRequest
    selectedFareId: Maybe (Id StationFare) # make it non maybe?
    bppId: Text
    bapId: Text
    quantity: Int
    bookingType: BookingTypeEnum
    status: BookingStatusEnum
    createdAt: UTCTime
    updatedAt: UTCTime

  constraints:
    id: "PrimaryKey"

  types:
    BookingTypeEnum:
      enum: "SINGLE_JOURNEY, ROUND_TRIP"
    BookingStatusEnum:
      enum: "CREATED, CONFIRMED, CANCELLED"


  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findByTrasactionId:
      kvFunction: findOneWithKV
      where: transaction_id

    findAllByStatus:
      kvFunction: findAllWithKV
      where: status

    updateQuantityById:
      kvFunction: updateWithKV
      params: [quantity, updatedAt]
      where: id

    updateTypeById:
      kvFunction: updateWithKV
      params: [type, updatedAt]
      where: id

    updateStatusById:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: id

    updateSelectedFareById:
      kvFunction: updateWithKV
      params: [selectedFareId, updatedAt]
      where: id



FRFSTicket:
  tableName: frfs_ticket

  fields:
    id: Id FRFSTicket
    bookingId: Id FRFSTicketBooking
    transactionId: Id FRFSSearchRequest
    bppId: Text
    bapId: Text
    ticketQr: Text
    validTill: UTCTime
    ticketStatus: TicketStatusEnum
    createdAt: UTCTime
    updatedAt: UTCTime

  constraints:
    id: "PrimaryKey"

  types:
    TicketStatusEnum:
      enum: "VALID, INVALID"



  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findByBookingId:
      kvFunction: findOneWithKV
      where: bookingId

    findByTrasactionId:
      kvFunction: findOneWithKV
      where: transactionId

    findAllByBookingId:
      kvFunction: findAllWithKV
      where: bookingId

    updateTicketStatusById:
      kvFunction: updateWithKV
      params: [ticketStatus, updatedAt]
      where: id

    updateTicketQrById:
      kvFunction: updateWithKV
      params: [ticketQr, updatedAt]
      where: id

    updateValidTillById:
      kvFunction: updateWithKV
      params: [validTill, updatedAt]
      where: id


Station:
  tableName: stations

  fields:
    id: Id Station
    name: Text
    code: Text
    lat: Maybe Double
    lon: Maybe Double
    merchnatId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity

  constraints:
    id: "PrimaryKey"


  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findByCode:
      kvFunction: findOneWithKV
      where: code

    findAllByMerchantId:
      kvFunction: findAllWithKV
      where: merchnatId

    findAllByMerchantOperatingCityId:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId

    updateCoordinatesById:
      kvFunction: updateWithKV
      params: [lat, lon]
      where: id



StationFare:
  tableName: station_fares

  fields:
    id: Id StationFare
    fromStationId: Id Station
    toStationId: Id Station
    fareAmount: HighPrecMoney
    currency: Maybe Currency
    # add booking type (SINGLE | ROUNDTRIP)

  constraints:
    id: "PrimaryKey"



  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findAllByFromStationId:
      kvFunction: findAllWithKV
      where: fromStationId

    findByFromTo:
      kvFunction: findOneWithKV
      where:
        and: [fromStationId, toStationId]

    updateFareAmountById:
      kvFunction: updateWithKV
      params: [fareAmount]
      where: id

    updateCurrencyById:
      kvFunction: updateWithKV
      params: [currency]
      where: id



FRFSConfig:
  tableName: frfs_config

  fields:
    id: Id FRFSConfig
    bppId: Text
    config: Text
    updatedAt: UTCTime

  constraints:
    id: "PrimaryKey"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id


FRFSPayment:
  tableName: frfs_payment

  fields:
    id: Id FRFSPayment # payment_id we receive in confirm from bap
    transactionId: Id FRFSSearchRequest
    frfsTicketBookingId: Id FRFSTicketBooking
    paymentReferenceNumber: Text # message.order.payments.params.transaction_id
    amount: HighPrecMoney
    currency: Currency
    status: PaymentStatusEnum # enums: COLLECTED_BY_BAP, SETTLED_TO_SELLER, REFUNDED_TO_BUYER, REFUND_INITIATED
    createdAt: UTCTime
    updatedAt: UTCTime

  types:
    PaymentStatusEnum:
      enum: "COLLECTED_BY_BAP, SETTLED_TO_SELLER, REFUNDED_TO_BUYER, REFUND_INITIATED"

  constraints:
    id: "PrimaryKey"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findByTrasactionId:
      kvFunction: findOneWithKV
      where: transactionId

    findByFrfsTicketBookingId:
      kvFunction: findOneWithKV
      where: frfsTicketBookingId

    findByPaymentReferenceNumber:
      kvFunction: findOneWithKV
      where: paymentReferenceNumber

    updateStatusById:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: id

    updateAmountById:
      kvFunction: updateWithKV
      params: [amount, updatedAt]
      where: id

    updateCurrencyById:
      kvFunction: updateWithKV
      params: [currency, updatedAt]
      where: id




