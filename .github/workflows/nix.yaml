name: Nix CI

on:
  push:
    branches: 
      - "main"
      - "backend/ci/use-github-provided-free-arm-linux-runners-for-ci"
      - "prodHotPush-Common"
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: 
      - "main"
      - "backend/ci/use-github-provided-free-arm-linux-runners-for-ci"
      - "prodHotPush-Common"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read
  packages: write

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should-proceed: ${{ steps.evaluate.outputs.should_proceed }}
      has-backend: ${{ steps.check-labels.outputs.has_backend }}
      should-push-docker: ${{ steps.check-docker-push.outputs.should_push_docker }}
    steps:
      - name: Apply labels
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Check global conditions
        id: evaluate
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" || 
                "${{ github.event_name }}" != "pull_request" || 
                "${{ github.event.action }}" != "closed" ]]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check for backend label
        id: check-labels
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            sleep 5
            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels")
            has_backend=$(echo "$response" | jq 'map(select(.name == "backend")) | length > 0')
          else
            has_backend=true
          fi
          echo "has_backend=${has_backend}" >> $GITHUB_OUTPUT
          echo "Label check result: ${has_backend}"

      - name: Check docker push conditions
        id: check-docker-push
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/backend/ci/use-github-provided-free-arm-linux-runners-for-ci" || 
                "${{ github.ref }}" == "refs/heads/prodHotPush-Common" || 
                "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "should_push_docker=true" >> $GITHUB_OUTPUT
          else
            echo "should_push_docker=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [check-conditions]
    if: needs.check-conditions.outputs.should-proceed == 'true' && needs.check-conditions.outputs.has-backend == 'true'
    strategy:
      matrix:
        include:
          - system: x86_64-linux
            host: x86_64-linux
          - system: aarch64-darwin
            host: aarch64-darwin
          - system: aarch64-linux
            host: aarch64-darwin
    runs-on: ${{ matrix.host }}
    outputs:
      docker-image-name: ${{ steps.docker.outputs.image_name }}
    steps:
      - name: Check matrix conditions
        id: check-conditions
        run: |
          if [[ "${{ matrix.system }}" == "aarch64-linux" && "${{ github.ref }}" != "refs/heads/backend/ci/use-github-provided-free-arm-linux-runners-for-ci" ]]; then
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.check-conditions.outputs.should_build == 'true'
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.cache/nix
          key: nixcache-${{ matrix.host }}-${{ matrix.system }}

      - name: Build all flake outputs
        if: steps.check-conditions.outputs.should_build == 'true'
        run: |
          om ci run --systems "${{ matrix.system }}" --no-out-link -- -v

      - name: Build Docker image
        id: docker
        if: steps.check-conditions.outputs.should_build == 'true' && contains(matrix.system, 'linux') && needs.check-conditions.outputs.should-push-docker == 'true'
        run: |
          echo "nix build .#packages.${{ matrix.system }}.dockerImage -o docker-image-${{ matrix.system }}.tgz"
          nix build .#packages.${{ matrix.system }}.dockerImage -o docker-image-${{ matrix.system }}.tgz
          echo "image_name=$(nix eval --raw .#dockerImage.imageName):$(nix eval --raw .#dockerImage.imageTag)" >> $GITHUB_OUTPUT
      
      - name: Upload Docker image
        if: steps.check-conditions.outputs.should_build == 'true' && contains(matrix.system, 'linux') && needs.check-conditions.outputs.should-push-docker == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.system }}
          path: docker-image-${{ matrix.system }}.tgz

  macos-build-for-cache:
    runs-on: ${{ matrix.host }}
    needs: [build, check-conditions]
    if: github.ref == 'refs/heads/backend/ci/use-github-provided-free-arm-linux-runners-for-ci'
    strategy:
      matrix:
        system: [aarch64-darwin]
        host: [x86_64-linux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build all flake outputs
        run: |
          om ci run --systems "${{ matrix.system }}" --no-out-link -- -v

  push-docker:
    needs: [build, check-conditions]
    if: needs.check-conditions.outputs.should-push-docker == 'true' && needs.check-conditions.outputs.has-backend == 'true'
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            arch: amd64
            system: x86_64-linux
          - runner: ubuntu-22.04-arm
            arch: arm64
            system: aarch64-linux
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ matrix.system }}
          path: .

      - name: Push Docker image for ${{ matrix.arch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker load < docker-image-${{ matrix.system }}.tgz
          IMAGE_NAME="${{ needs.build.outputs.docker-image-name }}"
          docker tag $IMAGE_NAME $IMAGE_NAME-${{ matrix.arch }}
          docker push $IMAGE_NAME-${{ matrix.arch }}
          docker logout ghcr.io

  create-manifest:
    needs: [push-docker, build]
    runs-on: ubuntu-latest
    steps:
      - name: Create and push manifest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          IMAGE_NAME="${{ needs.build.outputs.docker-image-name }}"
          
          docker manifest create $IMAGE_NAME \
            $IMAGE_NAME-amd64 \
            $IMAGE_NAME-arm64
          
          docker manifest push $IMAGE_NAME
          docker logout ghcr.io