name: Nix CI

on:
  push:
    branches: 
      - "main"
      - "prodHotPush-Common"
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: 
      - "main"
      - "prodHotPush-Common"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: read
  packages: write

jobs:
  check-conditions:
    runs-on: ubuntu-latest
    outputs:
      should-proceed: ${{ steps.evaluate.outputs.should_proceed }}
      has-backend: ${{ steps.check-labels.outputs.has_backend }}
    steps:
      - name: Apply labels
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Check global conditions
        id: evaluate
        run: |
          # Check if workflow should proceed (non-matrix conditions)
          if [[ "${{ github.event.pull_request.merged }}" == "true" || 
                "${{ github.event_name }}" != "pull_request" || 
                "${{ github.event.action }}" != "closed" ]]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check for backend label
        id: check-labels
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            sleep 5 # Small delay to ensure labels are applied
            response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels")
            has_backend=$(echo "$response" | jq 'map(select(.name == "backend")) | length > 0')
          else
            # For direct pushes to main/prodHotPush-Common, assume backend changes
            has_backend=true
          fi
          echo "has_backend=${has_backend}" >> $GITHUB_OUTPUT
          echo "Label check result: ${has_backend}"

  build:
    needs: [check-conditions]
    if: needs.check-conditions.outputs.should-proceed == 'true' && needs.check-conditions.outputs.has-backend == 'true'
    strategy:
      matrix:
        include:
          - system: x86_64-linux
            host: x86_64-linux
          - system: aarch64-darwin
            host: aarch64-darwin
          - system: aarch64-linux
            host: aarch64-darwin
    runs-on: ${{ matrix.host }}
    outputs:
      docker-image-name: ${{ steps.docker.outputs.image_name }}
      should_push_docker: ${{ steps.check-conditions.outputs.should_push_docker }}
    steps:
      - name: Check matrix conditions
        id: check-conditions
        run: |
          # Should build check (skip aarch64-linux on non-main)
          if [[ "${{ matrix.system }}" == "aarch64-linux" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          
          # Should push docker check
          if [[ ("${{ github.ref }}" == "refs/heads/main" || 
                "${{ github.ref }}" == "refs/heads/prodHotPush-Common" || 
                "${{ github.event.pull_request.merged }}" == "true") && 
                "${{ matrix.system }}" == "x86_64-linux" ]]; then
            echo "should_push_docker=true" >> $GITHUB_OUTPUT
          else
            echo "should_push_docker=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        if: steps.check-conditions.outputs.should_build == 'true'
        uses: actions/checkout@v4

      - name: Build all flake outputs
        if: steps.check-conditions.outputs.should_build == 'true'
        run: |
          om ci run --systems "${{ matrix.system }}" --no-out-link -- -v

      - name: Build Docker image
        id: docker
        if: steps.check-conditions.outputs.should_build == 'true' && steps.check-conditions.outputs.should_push_docker == 'true'
        run: |
          nix build .#dockerImage -o docker-image.tgz
          echo "image_name=$(nix eval --raw .#dockerImage.imageName):$(nix eval --raw .#dockerImage.imageTag)" >> $GITHUB_OUTPUT
      
      - name: Upload Docker image
        if: steps.check-conditions.outputs.should_build == 'true' && steps.check-conditions.outputs.should_push_docker == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tgz
  # The previous job would have already built for macOS but we must do it again
  # from NixOS host (via remote builder protocol) so as to populate its local
  # Nix store, and thus provide macOS binaries as part of our Nix cache.

  macos-build-for-cache:
    runs-on: ${{ matrix.host }}
    needs: [build, check-conditions]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        system: [aarch64-darwin]
        host: [x86_64-linux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build all flake outputs
        run: |
          om ci run --systems "${{ matrix.system }}" --no-out-link -- -v

  push-docker:
    needs: [build, check-conditions]
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_push_docker == 'true' && needs.check-conditions.outputs.has-backend == 'true'
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Push Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$GITHUB_TOKEN" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker load < docker-image.tgz
          docker push ${{ needs.build.outputs.docker-image-name }}
          docker logout ghcr.io