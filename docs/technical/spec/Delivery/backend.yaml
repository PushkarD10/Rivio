imports:
  riderApp:
    SearchRequest: Domain.Types.SearchRequest
    DSelectReq: Domain.Action.UI.Select
    LocationAddress: Domain.Types.LocationAddress
    Delivery: Domain.Action.Beckn.OnSelect
    DriverOfferQuoteDetails: Domain.Action.Beckn.OnSelect
    MerchantOperatingCity: Domain.Types.MerchantOperatingCity
    Centesimal: Kernel.Types.Common
  driverApp:
    Booking: Domain.Types.Booking    
    PricingPolicy: Domain.Types.Common
    FileType: AWS.S3.Types

types:
  riderApp:
    RiderPreferredOption:
      enum:
        - Delivery
      exists: true

    TripParty:
      enum:
        - Delivery DeliveryParties
        # - Ride RideParties
      exists: false

    DeliveryParties:
      enum:
        - Sender
        - Receiver
        - SomeoneElse        
      exists: false

    # RideParties:
    #   enum:
    #     - SomeOtherRider        

  driverApp:
    ServiceTierType:
      module: Domain.Types.ServiceTierType
      enum: 
        - DELIVERY_BIKE
      exists: true

    VehicleVariant:
      module: Domain.Types.VehicleVariant
      enum: 
        - DELIVERY_BIKE
      exists: true

    TripCategory:
      module: Domain.Types.Common
      enum: 
        - Delivery OneWayMode      
      exists: true

functions:
  common:
    fulfillmentTypeToTripCategory: BecknV2.OnDemand.Utils.Common # For On-Us no changes required
    tripCategoryToFulfillmentType: BecknV2.OnDemand.Utils.Common # For On-Us no changes required    
    tripCategoryToPricingPolicy: Domain.Types.Common # TripCategory::(Delivery OneWayOnDemandDynamicOffer) -> EstimateBased False
    skipDriverPoolCheck: Domain.Types.Common # TripCategory::(Delivery OneWayOnDemandDynamicOffer) -> False
    isEndOtpRequired: Domain.Types.Common # TripCategory::(Delivery _) -> True        

flow:
  searchRiderApp:
  # Initiate a IntraCity "DELIVERY" fareProductType Search from UI
  # Creation of SearchRequest table entry
    trigger:
      # Request Body =>
      # { 
      #   fareProductType: "DELIVERY", 
      #   contents: {...} 
      # }
      POST:
        endpoint: /ui/rideSearch
        request: SearchReq        
        module: API.UI.Search
        exists: true
      types:
        SearchReq:
          enum:
            - DeliverySearch OneWaySearchReq
          exists: true  
    functions:
      fareProductConstructorModifier: Domain.Action.UI.Search # "DeliverySearch" -> "DELIVERY" 
      getRouteDetails: Domain.Action.UI.Search # SearchReq::DeliverySearch -> processOneWaySearch
      extractSearchDetails: Domain.Action.UI.Search # SearchReq::(DeliverySearch OneWaySearchReq {..}) -> { riderPreferredOption = RiderPreferredOption::Delivery, roundTrip = False, stops = [destination], startTime = fromMaybe now startTime, returnTime = Nothing, .. }            
  
  searchDriverApp:
  # Send all IntraCity estimates for all possible trip categories
  # Creation of Estimate table entries
    trigger:
      POST:
        endpoint: /beckn/search
        exists: true
    functions:
      getPossibleTripOption: Domain.Action.Beckn.Search # For IntraCity append following Delivery TripCategory `TripCategory::(Delivery OneWayOnDemandDynamicOffer)`
      common: tripCategoryToPricingPolicy, skipDriverPoolCheck
    onSearchBecknTransform:
      functions:
        common: mkFulfillmentType

  onSearchRiderApp:
  # Filter "DELIVERY" fareProductType estimates
  # Creation of Estimate table entries with the filtered estimates based on RiderPreferredOption::Delivery
    trigger:
      POST:
        endpoint: /beckn/onsearch
        exists: true
    storage:
      Estimate:
        fields:
          fareProductType: Maybe FareProductType # Required to filter rider's preffered fareProduct estimates
        exists: true
    functions:            
      filterEstimtesByPrefference: Domain.Action.Beckn.OnSearch # RiderPreferredOption::Delivery -> filter (\estInfo -> estInfo.fareProductType == Just FareProductType::DELIVERY) estimatesInfo
      common: tripCategoryToPricingPolicy
    
  searchResultsRiderApp:
  # No Change, Return all the estimates stored in Estimate table
    trigger:
      GET:
        endpoint: /ui/rideSearch/results
        exists: true

  selectRiderApp:
  # Create entry in SearchRequestPartiesLink table with the Sender & Receiver party details, If their Person entry does not exist then create a person entry
  # Update the `instructions, extras` in Location table by SearchRequest.fromLocationId & SearchRequest.toLocationId
    trigger:
      # Request Body =>
      # { 
      #   deliveryDetails: { 
      #     senderDetails : {  
      #       name: "...", 
      #       phoneNumber: "...", 
      #       address: { 
      #         instructions: "...", 
      #         extras: "..." 
      #       } 
      #     }, 
      #     receiverDetails: { 
      #       name: "...", 
      #       phoneNumber: "...", 
      #       address: { 
      #         instructions: "...", 
      #         extras: "..." 
      #       } 
      #     } 
      #   }, 
      #   ... 
      # }
      POST:
        endpoint: /ui/rideSearch/:estimateId/select2
        request: DSelectReq        
        module: API.UI.Select
        exists: true
      types:
        PersonDetails:
          name: Text
          phoneNumber: Text
          address: LocationAddress # Send `instructions, extras` in address
        DeliveryDetails:
          senderDetails: PersonDetails
          receiverDetails: PersonDetails
          initiatedAs: DeliveryInitiation 
        DSelectReq:
          deliveryDetails: Maybe DeliveryDetails # For FareProductType::DELIVERY this field should be passed in Select
    storage:
      Location:
        types:
          LocationAddress:
            instructions: Maybe Text
            extras: Maybe Text
        fields:
          address: LocationAddress      
        beamFields: # Store additional instructions and extras (building/flatNo) for Sender/Receiver location
          address:
            instructions: Maybe Text
            extras: Maybe Text
        queries: updateInstructionsAndExtrasById
        exists: true

      SearchRequest:
        fields:
          initiatedBy: Maybe TripParty # (Delivery_Sender | Delivery_Receiver) or (Ride_Rider)
        exists: true
        queries: updateInitiatedBy

      SearchRequestPartiesLink:
        fields:
          searchRequestId: Id SearchRequest
          partyId: Id Person
          partyType: TripParty # Delivery_Sender | Delivery_Receiver
          partyName: Text
          # isActive: Bool # Handle, isActive cases
        queries: create
  
  selectDriverApp:  
  # Initiate Pooling & Broadcast the search request to all the eligible drivers
    trigger:
      POST:
        endpoint: /beckn/select
        exists: true    
    
  onSelectDriverApp:
  # Creation of entry in DriverQuote table
    trigger:
      POST:
        endpoint: /ui/quote/respond
        exists: true
    functions:
      common: tripCategoryToPricingPolicy
      
  
  onSelectRiderApp:
  # Creation of entry in Quote & DeliveryDriverOfferDetails (DriverOffer) table
    trigger:
      POST:
        endpoint: /beckn/onselect
        exists: true
      types:
        OnSelectQuoteDetails:
          module: Domain.Action.Beckn.OnSelect
          enum:
            - Delivery DriverOfferQuoteDetails
          exists: true
    functions:      
      buildDriverQuoteDetails: Domain.Action.Beckn.OnSelect # No change, Transform => OnSelectQuoteDetails::(Delivery DriverOfferQuoteDetails) -> QuoteDetails::(DeliveryDriverOfferDetails DriverOffer)
      toQuoteDetails: Storage.Queries.Transformers.Quote # No change, Used in FromTType of Quote table
      fromQuoteDetails: Storage.Queries.Transformers.Quote # No change, Used in ToTType of Quote table
    storage:
      Quote:
        types:
          QuoteDetails:
            enum:
              - DeliveryDriverOfferDetails DriverOffer
            exists: true
        fields:
          quoteDetails: QuoteDetails
        exists: true
  
  confirmRiderApp:
  # Creation of entry in BookingPartiesLink table by fetching the data from SearchRequestPartiesLink if searchRequest.riderPrefferedOption == Delivery
  # Creation of entry in Booking table
    trigger:
      POST:
        endpoint: /ui/rideSearch/quotes/:quoteId/confirm
        exists: true
      types:       
        ConfirmQuoteDetails:
          module: SharedLogic.Confirm
          enum:
            - ConfirmDeliveryDetails Text
          exists: true
    functions:
      getBPPQuoteId: SharedLogic.Confirm # Transform => QuoteDetails::(DeliveryDriverOfferDetails driverOffer) -> getBPPQuoteIdFromDriverOffer driverOffer now      
      buildBookingDetails: SharedLogic.Confirm # Transform => QuoteDetails::(DeliveryDriverOfferDetails _) -> BookingDetails::(DeliveryDetails DeliveryBookingDetails)
      toBookingDetailsAndFromLocation: Storage.Queries.Transformers.Booking # Used in FromTType of Booking table
      getDistance: Storage.Queries.Transformers.Booking # Used in ToTType of Booking table
      getFareProductType: Storage.Queries.Transformers.Booking # Used in ToTType of Booking table
      getOtpCode: Storage.Queries.Transformers.Booking # Used in ToTType of Booking table
      getStopLocationId: Storage.Queries.Transformers.Booking # Used in ToTType of Booking table
      getToLocationId: Storage.Queries.Transformers.Booking # Used in ToTType of Booking table
    storage:      
      SearchRequestPartiesLink:
        queries: findAllBySearchRequestId

      # Sender, Reciever -> Delivery_Sender, Delivery_Receiver
      # Sender, Reciever, SomeoneElse -> Delivery_Sender, Delivery_Receiver => initiatedBy: SomeoneElse      

      BookingPartiesLink:
        fields:
          id: Id BookingPartiesLink
          bookingId: Id Booking
          partyId: Id Person
          partyType: TripParty # Delivery_Sender | Delivery_Receiver
          partyName: Text
          isActive: Bool # Handle, inActive cases
        queries: create
        secondaryKey: partyId, isActive

      Booking:
        types:
          DeliveryBookingDetails:
            toLocation: Location
            distance: Distance
            otpCode: Text
          BookingDetails:
            enum:
              - DeliveryDetails DeliveryBookingDetails
            exists: true
        fields:          
          initiatedBy: Maybe TripParty          
        exists: true

  initRiderApp: # Fetch all active BookingPartyLinks and if booking.tripCategory == TripCategory::(Delivery _) then construct DELIVERY becknTags
    storage:  
      BookingPartiesLink:
        queries: findAllActiveByBookingId
  
  initDriverApp:
  # Add the `instructions` and `extras` in Location table
  # Creation of entry in Booking table for ValidatedEstimate
    trigger:
      POST:
        endpoint: /beckn/init
        becknTags:
          DELIVERY:
            - SENDER_NUMBER: Maybe Text
            - SENDER_NAME: Maybe Text
            - SENDER_LOCATION_INSTRUCTIONS: Maybe Text
            - INITIATED_AS: DeliveryInitiation
            - RECEIVER_NUMBER: Maybe Text
            - RECEIVER_NAME: Maybe Text
            - RECEIVER_LOCATION_INSTRUCTIONS: Maybe Text
        exists: true
    storage:
      Location:
        types:
          LocationAddress:
            instructions: Maybe Text
            extras: Maybe Text
        fields:
          address: LocationAddress          
        beamFields: # Store additional instructions for Sender/Receiver location
          address:
            instructions: Maybe Text
            extras: Maybe Text        
        exists: true

      Booking:
        types:
          DeliveryPersonDetails:
            name: Text
            phoneNumber: EncryptedHashedField e Text
            primaryExophone: Text
          DeliveryBookingDetails:
            senderDetails: DeliveryPersonDetails
            receiverDetails: DeliveryPersonDetails            
        fields:
          deliveryBookingDetails: Maybe DeliveryBookingDetails # If booking.tripCategory == TripCategory::(Delivery _) then Just else Nothing
        beamFields:
          deliveryBookingDetails:
            senderPhoneNumber: EncryptedHashedField e Text
            senderName: Text
            senderPrimaryExophone: Text
            receiverPhoneNumber: EncryptedHashedField e Text
            receiverName: Text
            receiverPrimaryExophone: Text            
        exists: true

  onInitDriverApp: # No Change
  
  onInitRiderApp: # No Change
    trigger:
      POST:
        endpoint: /beckn/oninit
        exists: true
    functions:
      getToLocationFromBookingDetails: Domain.Action.Beckn.OnInit # Transform => BookingDetails::(DeliveryDetails details) -> Just details.toLocation
  
  confirmRiderApp_: # No Change

  confirmDriverApp:
  # Creation of entry in Ride table for DriverQuote request type
    trigger:
      POST:
        endpoint: /beckn/confirm
        exists: true
    functions:
      validateRequest: Domain.Action.Beckn.Confirm # TripCategory::(Delivery OneWayOnDemandDynamicOffer) -> getDriverQuoteDetails, TripCategory::(Delivery OneWayOnDemandStaticOffer) -> getStaticQuoteDetails, TripCategory::(Delivery OneWayRideOtp) -> getRideOtpQuoteDetails

  rideListDriverApp:
    trigger:
      # Response Body =>
      # {
      #   list: [
      #     { 
      #       senderDetails: { 
      #         name: "...", 
      #         phoneNumber: "..." ,
      #         primaryExophone: "..."
      #       },
      #       receiverDetails: { 
      #         name: "...", 
      #         phoneNumber: "...",
      #         primaryExophone: "..."      
      #       },      
      #       fromLocation: { 
      #         instructions: "...",
      #         extras: "..."
      #         ...
      #       },
      #       toLocation: { 
      #         instructions: "...",
      #         extras: "..."
      #         ...
      #       },
      #       ...
      #     }
      #   ]
      # }
      GET:        
        endpoint: /ui/driver/ride/list?limit=1
        request: DriverRideListRes        
        module: API.UI.Select
        exists: true
      types:
        DeliveryPersonDetailsAPIEntity:
          fields:
            name: Text
            phoneNumber: Text
            primaryExophone: Text
          exists: false

        LocationAPIEntity:
          fields:
            instructions: Maybe Text
            extras: Maybe Text
          exists: true

        DriverRideRes:
          fields:
            senderDetails: DeliveryPersonDetailsAPIEntity
            receiverDetails: DeliveryPersonDetailsAPIEntity            
            fromLocation: LocationAPIEntity
            toLocation: Maybe LocationAPIEntity
          exists: true
      storage:
        exophone:
          types:
            ExophoneType: 
              enum: # This is required to know during direct frontend exotel calling webhook that whether to return sender or receiver's phone number customerPhoneNumber
                # - CALL_RIDE
                - CALL_DELIVERY_SENDER
                - CALL_DELIVERY_RECEIVER
              exists: true

  
  onConfirmRiderApp: # No Change

  onUpdateRideAssignedDriverApp: # No Change, Creation of entry in Ride table

  onUpdateRideAssignedRiderApp: 
  # if booking.initiatedAs \= Sender
  #   => Send SMS to Receiver with RideStartOTP, DriverName, DriverExophoneNumber, DriverTrackingUrl
  # Creation of entry in Ride table
  
  rideListRiderApp:
  # Find active BookingPartyLink for the rider and fetch it's corresponding booking details if exists
    trigger:
      # Response Body =>
      # {
      #   list: [
      #     {
      #       rideOtp: "...",
      #       endOtp: "...",
      #       bookingDetails: {
      #         fareProductType: "DELIVERY",
      #         contents: {
      #           senderDetails: {
      #             name: "...",
      #             phoneNumber: "..."
      #           },
      #           receiverDetails: {
      #             name: "...",
      #             phoneNumber: "..."
      #           },
      #           riderType: DeliveryInitiation,
      #           toLocation: {
      #             instructions: "...",
      #             extras: "...",
      #             ...
      #           },
      #           estimatedDistance: "...",
      #           estimatedDistanceWithUnit: { ... }
      #         }
      #       },
      #       tripCategory: TripCategory::Delivery_OneWayOnDemandDynamicOffer
      #     }
      #   ]
      # }
      # Person -> personMobileNumber == Exotel.callFrom (For Exotel)
      #   Booking -> findOneWithKv $ riderId == person.personId (For RideBookingList)
          # <|> (BookingPartiesLink -> findOneWithKv $ isActive = True && partyId == personId 
          #       >>= Booking -> findOneWithKv $ booking.id == bookingPartiesLink.bookingId
          #     )
      GET:
        endpoint: /ui/rideBooking/list?limit=1&offset=0&onlyActive=true
        response: BookingListRes        
        module: Domain.API.UI.Booking
        exists: true
      types:
        LocationAPIEntity:
          fields:
            instructions: Maybe Text
            extras: Maybe Text
          exists: true

        DeliveryPersonDetailsAPIEntity:
          fields:
            name: Text
            phoneNumber: Text
          exists: false

        DeliveryBookingAPIDetails:
          toLocation: LocationAPIEntity
          estimatedDistance: HighPrecMeters
          estimatedDistanceWithUnit: Distance
          senderDetails: DeliveryPersonDetailsAPIEntity
          recieverDetails: DeliveryPersonDetailsAPIEntity          

        BookingAPIDetails:
          enum:
            - DeliveryAPIDetails DeliveryBookingAPIDetails
          exists: true  
      storage:  
        BookingPartiesLink:
          queries: findOneActiveByPartyId
  
  uploadDeliveryImageDriverApp:
  # This endpoint would be used by driver to upload the delivery images for a Ride multiple times to S3 and a 
  # fetch API which would be a proxy API to fetch the information from S3
    trigger:
      POST:
        endpoint: /ui/driver/ride/:rideId/uploadDeliveryImage
        exist: false
        request:
          multipart: DeliveryImageUploadReq
        response: APISuccess
        type:
          DeliveryImageUploadReq:
            file: FilePath
            reqContentType: Text
            fileType: FileType # Audio | Video | Image | AudioLink | VideoLink | ImageLink | PortraitVideoLink
      GET:
        endpoint: /internal/ride/:rideId/deliveryImage
        header:
          token: Text # merchant.internalApiKey
        exist: false
        response: Text
    storage:
      Ride:
        fields:
          deliveryFileIds: Maybe [Id MediaFile]          
      exists: true

  getDeliveryImageRiderApp:
  # Fetch DeliveryImage in Base64 format on Rider App by calling the Driver App's internal fetch image API to fetch ride delivery image from S3
  trigger:
    GET:
      endpoint: /ui/ride/:rideId/deliveryImage
      exists: false
      response: Text # Image as Base64

  exotelFrontendDirectCallToSenderOrReceiverDriverApp:
  # Based on the ExophoneType corresponding to callTo send either Sender/Receiver phone number to the exotel callback
  # CALL_RIDE => riderPhoneNumber
  # CALL_DELIVERY_SENDER => senderPhoneNumber
  # CALL_DELIVERY_RECEIVER => receiverPhoneNumber
  function:
    getCustomerMobileNumber: Domain.Action.UI.Call

  exotelFrontendDirectCallToDriverRiderApp:
  # Based on the ExophoneType corresponding to callTo send either Sender/Receiver/SomeoneElse phone number to the exotel callback
    function:
      # In this function whether the person trying to call the driver is matching as Sender, Receiver or SomeoneElse who has created the Booking in the system. 
      # findAssignedByRiderId person.id <|> findAssignedBySenderId person.id <|> findAssignedByReciverId person.id
      getDriverMobileNumber: Domain.Action.UI.Call
      findRiderDetails: Domain.Action.UI.Call

  startRideDriverApp:
  # Driver can start the ride with the startOtp

  webTrackingRider:
  # Web tracking of Ride from Sender & Reciver Device
    trigger:
      GET:
        endpoint: /dashboard/bap/ride/:rideId/info
        response: RideInfo
        type:
          RideInfo:
            tripCategory: TripCategory # Delivery_OneWayOnDemandDynamicOffer
            driverNumber: Text # Driver Phone Number in Plaintext for direct call
      
  onUpdateRideStartedDriverApp:
    # Generate End OTP & Send it to Rider App
    functions:
      common: isEndOtpRequired
  
  onUpdateRideStartedRiderApp:
  # if booking.initiatedAs \= Receiver
  #   => Send SMS to Receiver with RideEndOTP, DriverName, DriverExophoneNumber, DriverTrackingUrl

  endRideDriverApp:
    trigger:  
      POST:
        endpoint: /ui/driver/ride/:rideId/end
        exist: true
    functions:
      common: isEndOtpRequired
    # End otp only required for Delivery
